"""
CI/CD configuration for RateMyRations test suite.
"""

# GitHub Actions workflow
name: RateMyRations Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ratemyrations/requirements.txt
        pip install pytest pytest-cov pytest-html selenium requests flake8 black isort
    
    - name: Set up test environment
      run: |
        export ADMIN_TOKEN="test-admin-token-12345"
        export RATE_LIMIT_DEFAULT="1000 per minute"
        export CACHE_MINUTES="1"
        export ENABLE_DELETE_RATINGS="true"
    
    - name: Run linting
      run: |
        flake8 ratemyrations/ --max-line-length=100
        black --check ratemyrations/
        isort --check-only ratemyrations/
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=ratemyrations --cov-report=xml
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v
    
    - name: Run performance tests
      run: |
        python -m pytest tests/unit/test_performance.py -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Generate test report
      run: |
        python -m pytest tests/ --html=test_report.html --self-contained-html
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test_report.html

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ratemyrations/requirements.txt
        pip install pytest selenium
    
    - name: Set up Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install ChromeDriver
      run: |
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
        wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}/chromedriver_linux64.zip"
        sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
    
    - name: Start application
      run: |
        cd ratemyrations
        export ADMIN_TOKEN="test-admin-token-12345"
        python -m ratemyrations.app &
        sleep 5
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/e2e/ -v

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r ratemyrations/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'  # Only run on scheduled builds
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install -r ratemyrations/requirements.txt
        pip install pytest locust
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/unit/test_performance.py -v --benchmark-only
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: .benchmarks/
